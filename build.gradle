version project.modVersion
group project.modGroup

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/maven/' }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
    // Disables Gradle build caching for this task
    // If build caching is enabled this can cause the refmap to not be built and included
    outputs.upToDateWhen { false }
}

compileKotlin.kotlinOptions {
    freeCompilerArgs += '-Xlambdas=indy'
    freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
    freeCompilerArgs += '-Xopt-in=kotlin.contracts.ExperimentalContracts'
}

repositories {
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url = 'https://impactdevelopment.github.io/maven/' }
    maven { url = "https://jitpack.io" }
    mavenCentral()
}

minecraft {
    mappings channel: "$mappingsChannel", version: "$mappingsVersion"

    runs {
        client {
            workingDirectory project.file('run')

            property 'fml.coreMods.load', 'com.lambda.client.LambdaCoreMod'
            property 'mixin.env.disableRefMap', 'true' // Disable refmap so we don't get trolled by Baritone

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    jarLibs
    // Force choosing the correct nightly build because Mac OS chooses an invalid one
    configureEach {
        resolutionStrategy {
            force "org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"

    // Online maven dependency coming soon
    implementation 'com.github.lambda-client:lambda:-SNAPSHOT'

    implementation('org.spongepowered:mixin:0.8.5') {
        exclude module: 'commons-io'
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'launchwrapper'
        exclude module: 'log4j-core' // we want to exclude this as well because 0.7.11 includes it too new for MC
    }

    // Hacky way to get mixin work
    annotationProcessor('org.spongepowered:mixin:0.8.5:processor') {
        exclude module: 'gson'
    }
    
    implementation 'org.reflections:reflections:0.9.12'
    implementation 'com.github.cbyrneee:DiscordIPC:e18542f600'

    // Kotlin libs
    // kotlin-stdlib-common and annotations aren't required at runtime
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    // Add them back to compileOnly (provided)
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
    compileOnly 'org.jetbrains:annotations:23.0.0'

    // This Baritone will NOT be included in the jar
    implementation 'com.github.cabaletta:baritone:1.2.14'

    // Unit Testing frameworks
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    // Add your dependencies below
    // jarLibs 'com.lambda:example:1.0.0'
}

mixin {
    defaultObfuscationEnv 'searge'
    add sourceSets.main, 'mixins.autoduper.refmap.json'
}

processResources {
    exclude '**/rawimagefiles'

    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        include 'plugin_info.json'
        expand 'version': project.version
    }
}

test {
    useJUnitPlatform()
}

build.dependsOn('jar')
jar.finalizedBy('reobfJar')

shadowJar {
    archiveClassifier.set('')
    configurations = []
    relocate 'kotlin', 'com.lambda.shadow.kotlin'
    relocate 'kotlinx', 'com.lambda.shadow.kotlinx'
    finalizedBy 'configureReobfTaskForReobfShadowJar', 'reobfShadowJar'
    mustRunAfter 'jar'
}

reobf {
    shadowJar {}
    jar {
        enabled = false
    }
}

artifacts {
    shadowJar
}